dplyr::relocate(distancias, .after = num_registros)
datos = sf::st_transform(x = datos, crs = 4326)
paleta = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_registros), max(datos$num_registros)))
mapa
library(leaflet)
datos = sf::read_sf("Datos/rutas_con_numero_de_usos_citydata.geojson")
datos = sf::st_transform(x = datos, crs = 32614)
datos = datos |>
dplyr::mutate(distancias = sf::st_length(x = geometry)) |>
dplyr::relocate(distancias, .after = num_registros)
datos = sf::st_transform(x = datos, crs = 4326)
paleta = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_registros), max(datos$num_registros)))
mapa = leaflet() |>
addTiles() |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>",
"Distancia: ", "<b>", datos$distancias, "</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}))
mapa
mapa = leaflet() |>
addTiles() |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Distancia: ", "<b>", datos$distancias, "</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}))
mapa
htmlwidgets::saveWidget(mapa, "Rutas_numero_uso_Citydata.html", selfcontained = T, title = "Rutas numero de uso Citydata")
mapa = leaflet() |>
addTiles() |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Distancia: ", "<b>", round(x = datos$distancias, digits = 2), "</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}))
mapa
htmlwidgets::saveWidget(mapa, "Rutas_numero_uso_Citydata.html", selfcontained = T, title = "Rutas numero de uso Citydata")
mapa = leaflet() |>
addTiles() |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Distancia: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}))
mapa
htmlwidgets::saveWidget(mapa, "Rutas_numero_uso_Citydata.html", selfcontained = T, title = "Rutas numero de uso Citydata")
View(datos)
datos |>  head()
datos=datos |>
dplyr::mutate(num_reg_x_metro=num_registros/distancias)
View(datos)
View(datos)
datos = sf::st_transform(x = datos, crs = 32614)
datos = sf::read_sf("Datos/rutas_con_numero_de_usos_citydata.geojson")
datos = sf::st_transform(x = datos, crs = 32614)
datos = datos |>
dplyr::mutate(distancias = sf::st_length(x = geometry)) |>
dplyr::relocate(distancias, .after = num_registros) |>
dplyr::mutate(num_reg_x_metro = num_registros/distancias) |>
dplyr::relocate(num_reg_x_metro, .after = distancias) |>
dplyr::mutate(distancias = distancias |>  as.character() |>  as.numeric(),
num_reg_x_metro = num_reg_x_metro |> as.character() |>  as.numeric())
View(datos)
datos = sf::st_transform(x = datos, crs = 4326)
View(datos)
datos = datos |>
dplyr::filter(!sf::st_is_empty(geometry))
View(datos)
View(datos)
library(leaflet)
datos = sf::read_sf("Datos/rutas_con_numero_de_usos_citydata.geojson")
datos = sf::st_transform(x = datos, crs = 32614)
datos = datos |>
dplyr::mutate(distancias = sf::st_length(x = geometry)) |>
dplyr::relocate(distancias, .after = num_registros) |>
dplyr::mutate(num_reg_x_metro = num_registros/distancias) |>
dplyr::relocate(num_reg_x_metro, .after = distancias) |>
dplyr::mutate(distancias = distancias |>  as.character() |>  as.numeric(),
num_reg_x_metro = num_reg_x_metro |> as.character() |>  as.numeric())
datos = sf::st_transform(x = datos, crs = 4326)
datos = datos |>
dplyr::filter(!sf::st_is_empty(geometry))
paleta_registro = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", datos$num_reg_x_metro, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), "</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
library(leaflet)
datos = sf::read_sf("Datos/rutas_con_numero_de_usos_citydata.geojson")
datos = sf::st_transform(x = datos, crs = 32614)
datos = datos |>
dplyr::mutate(distancias = sf::st_length(x = geometry)) |>
dplyr::relocate(distancias, .after = num_registros) |>
dplyr::mutate(num_reg_x_metro = num_registros/distancias) |>
dplyr::relocate(num_reg_x_metro, .after = distancias) |>
dplyr::mutate(distancias = distancias |>  as.character() |>  as.numeric(),
num_reg_x_metro = num_reg_x_metro |> as.character() |>  as.numeric())
datos = sf::st_transform(x = datos, crs = 4326)
datos = datos |>
dplyr::filter(!sf::st_is_empty(geometry))
paleta_registro = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", round(x = datos$num_reg_x_metro, digits = 4), "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
View(datos)
htmlwidgets::saveWidget(mapa, "Rutas_numero_uso_Citydata.html", selfcontained = T, title = "Rutas numero de uso Citydata")
View(datos)
library(leaflet)
datos = sf::read_sf("Datos/rutas_con_numero_de_usos_citydata.geojson")
datos = sf::st_transform(x = datos, crs = 32614)
datos = datos |>
dplyr::mutate(distancias = sf::st_length(x = geometry)) |>
dplyr::relocate(distancias, .after = num_registros) |>
dplyr::mutate(num_reg_x_metro = num_registros/distancias) |>
dplyr::relocate(num_reg_x_metro, .after = distancias) |>
dplyr::mutate(distancias = distancias |>  as.character() |>  as.numeric(),
num_reg_x_metro = num_reg_x_metro |> as.character() |>  as.numeric())
datos = sf::st_transform(x = datos, crs = 4326)
datos = datos |>
dplyr::filter(!sf::st_is_empty(geometry))
paleta_registro = colorNumeric(palette = "Blues", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "Blues", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", round(x = datos$num_reg_x_metro, digits = 4), "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
library(leaflet)
datos = sf::read_sf("Datos/rutas_con_numero_de_usos_citydata.geojson")
datos = sf::st_transform(x = datos, crs = 32614)
datos = datos |>
dplyr::mutate(distancias = sf::st_length(x = geometry)) |>
dplyr::relocate(distancias, .after = num_registros) |>
dplyr::mutate(num_reg_x_metro = num_registros/distancias) |>
dplyr::relocate(num_reg_x_metro, .after = distancias) |>
dplyr::mutate(distancias = distancias |>  as.character() |>  as.numeric(),
num_reg_x_metro = num_reg_x_metro |> as.character() |>  as.numeric())
datos = sf::st_transform(x = datos, crs = 4326)
datos = datos |>
dplyr::filter(!sf::st_is_empty(geometry))
paleta_registro = colorNumeric(palette = "RdYlBu", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "RdYlBu", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", round(x = datos$num_reg_x_metro, digits = 4), "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
paleta_registro = colorNumeric(palette = "heat", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "heat", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", round(x = datos$num_reg_x_metro, digits = 4), "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
paleta_registro
paleta_registro = colorNumeric(palette = "inferno", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "inferno", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", round(x = datos$num_reg_x_metro, digits = 4), "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
paleta_registro = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_registros), max(datos$num_registros)))
paleta_numr_m = colorNumeric(palette = "YlOrRd", domain = c(min(datos$num_reg_x_metro), max(datos$num_reg_x_metro)))
mapa = leaflet() |>
addTiles(options = tileOptions(opacity = 0.6)) |>
setView(lng = -98.92, lat = 20.47, zoom = 8)  |>
addPolylines(data = datos, color = paleta_registro(x = datos$num_registros), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros: ", "<b>", datos$num_registros, "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros") |>
addPolylines(data = datos, color = paleta_numr_m(x = datos$num_reg_x_metro), weight = 2, opacity = 0.8,
label = paste0("Nombre: ", "<b>", datos$name, "</b>", "<br>",
"Registros por metro: ", "<b>", round(x = datos$num_reg_x_metro, digits = 4), "</b>", "<br>",
"Longitud: ", "<b>", round(x = datos$distancias, digits = 2), " m","</b>") |>
lapply(FUN = function(x) { htmltools::HTML(x)}),
group = "Registros por metro") |>
addLayersControl(
baseGroups = c("Registros", "Registros por metro"),
options = layersControlOptions(collapsed = FALSE)
) |>
hideGroup(c("Registros por metro"))
mapa
library(leaflet)
library(leaflet.extras2)  # asegúrate de tener la versión más reciente
# ejemplo de puntos (lat, lon) por los que mover el marcador
puntos <- data.frame(
lng = c(-99.13, -98.98, -98.80, -98.50),
lat = c(19.43, 19.50, 19.60, 19.70)
)
# Crear el mapa
m <- leaflet() %>%
addTiles() %>%
setView(lng = mean(puntos$lng), lat = mean(puntos$lat), zoom = 10) %>%
# Añadir ruta (polyline) opcional para ver camino
addPolylines(data = puntos, lng = ~lng, lat = ~lat, color = "blue") %>%
# Añadir marcador que se mueva
addMovingMarker(
lng = puntos$lng,
lat = puntos$lat,
icon = makeIcon(
iconUrl = "https://leafletjs.com/examples/custom-icons/leaf-blue.png",
iconWidth = 38, iconHeight = 45,
iconAnchorX = 19, iconAnchorY = 45
),
duration = 5000,       # duración total o por segmento (ms)
movingOptions = movingMarkerOptions(
autostart = TRUE,
loop = TRUE
)
)
# Mostrar
m
source("~/.active-rstudio-document", echo = TRUE)
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
install.packages("spatialEco")
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
infraestructura = terra::rast(infraestructura)
viajes = terra::rast(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
infraestructura
infraestructura
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
infraestructura = terra::rast(infraestructura)
infraestructura
viajes
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
infraestructura
viajes
infre = raster::resample(infraestructura, viajes, method = "bilinear")
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
infre = raster::resample(infraestructura, viajes, method = "bilinear")
correlacion = spatialEco::rasterCorrelation(x = infre, y = viajes)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
correlacion = spatialEco::rasterCorrelation(x = infre, y = viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
View(correlacion)
correlacion@pntr
correlacion@pntr
correlacion
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
infre = raster::resample(infraestructura, viajes, method = "bilinear")
infre = raster::disaggregate(x = infraestructura, fact = 3)
infre
viajes
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
correlacion
plot(correlacion)
plot(infraestructura)
raster::plot(infraestructura)
raster::plotplot(correlacion)
raster::plot(correlacion)
hist(correlacion)
hist(terra::values(correlacion))
correlacion[correlacion < -1 | correlacion > 1] = NA
terra::values(correlacion)
terra::values(correlacion)
terra::values(correlacion) |>  hist()
raster::plot(correlacion)
correlacion
infraestructura
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
infraestructura
viajes
#infre = raster::resample(infraestructura, viajes, method = "bilinear")
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
infraestructura
viajes = terra::rast(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
correlacion
raster::plot(correlacion)
library(leaflet)
leaflet() |> addTiles() |> addRasterImage(correlacion,opacity = 0.7)
crs(correlacion)
raster::crs(correlacion)
raster::extent(correlacion)
rast::extent(correlacion)
terra::extent(correlacion)
correlacion
plot(infre)
library(raster)
plot(infre)
plot(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes,s = 3)
raster::plot(correlacion)
terra::plot(correlacion)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes,s = 9)
terra::plot(correlacion)
terra::plot(correlacion)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes,s = 5)
terra::plot(correlacion)
viajes[viajes |> is.na()]=-1
plot(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes,s = 5)
terra::plot(correlacion)
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
proyeccion
terra::crs(correlacion)
terra::extend(correlacion)
terra::crs(proyeccion)
terra::crs(correlacion)
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
#infre = raster::resample(infraestructura, viajes, method = "bilinear")
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes, s = 1)
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
proyeccion
correlacion
proyeccion = terra::rast(proyeccion)
proyeccion
proyeccion
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
proyeccion = terra::rast(proyeccion)
leaflet() |> addTiles() |> addRasterImage(proyeccion,opacity = 0.7)
class(proyeccion)
correlacion = terra::project(x = correlacion, "EPSG:4326")
leaflet() |> addTiles() |> addRasterImage(correlacion,opacity = 0.7)
correlacion
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
proyeccion = terra::rast(proyeccion)
#infre = raster::resample(infraestructura, viajes, method = "bilinear")
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
plot(infre)
plot(viajes)
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
correlacion = terra::project(x = correlacion, terra::crs(proyeccion))
correlacion
correlacion[correlacion < -1 | correlacion > 1] = NA
leaflet() |> addTiles() |> addRasterImage(correlacion,opacity = 0.7)
terra::writeRaster(correlacion, "correlacion_infraestructura_con_numero_de_viajes.tif", filetype = "GTiff", overwrite = TRUE)
######################
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
proyeccion = terra::rast(proyeccion)
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
viajes[is.na(viajes)] = -1
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
terra::plot(correlacion)
correlacion[correlacion < -1 | correlacion > 1] = NA
terra::plot(correlacion)
correlacion = terra::project(x = correlacion, terra::crs(proyeccion))
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
proyeccion = terra::rast(proyeccion)
#infre = raster::resample(infraestructura, viajes, method = "bilinear")
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
viajes[is.na(viajes)] = -1
plot(infre)
######################
infraestructura = raster::raster("Datos/j_Percepción_infraestructura_vial.tif")
viajes = raster::raster("Datos/nivel_de_uso_proxy_de_numero_de_viajes.tif")
proyeccion = raster::raster("../../Importantes_documentos_usar/Accesibilidad/carreteras.tif")
proyeccion = terra::rast(proyeccion)
infre = raster::disaggregate(x = infraestructura, fact = 3)
infraestructura = terra::rast(infre)
viajes = terra::rast(viajes)
viajes[is.na(viajes)] = -1
correlacion = spatialEco::rasterCorrelation(x = infraestructura, y = viajes)
terra::plot(correlacion)
correlacion = terra::project(x = correlacion, terra::crs(proyeccion))
correlacion[correlacion < -1 | correlacion > 1] = NA
terra::crs(correlacion)
terra::crs(proyeccion)
library(leaflet)
leaflet() |> addTiles() |> addRasterImage(correlacion,opacity = 0.7)
terra::writeRaster(correlacion, "correlacion_infraestructura_con_numero_de_viajes_con_menos1.tif", filetype = "GTiff", overwrite = TRUE)
